package {{go_package}}

import
(
	"bytes"
	"encoding/binary"
	"github.com/golang/protobuf/proto"

{% for pkg in go_imports %}
	"{{pkg}}"
{% endfor %}{# pkg in go_imports #}
{% for pkg in go_private_imports %}
	"{{pkg}}"
{% endfor %}{# pkg in go_private_imports #}
)

{% set servicename = name | capfirst %}
{% set interfacename = name | capfirst + "Interface" %}
{% set dispatchername = name | capfirst + "Dispatcher" %}
{% set methodmapname = name | lower + "_methods" %}

type handle{{servicename}}Method func(target {{interfacename}}, remote nfrpc.RemoteNubInfo, data *bytes.Buffer)

var {{methodmapname}} map[nfrpc.MethodID]handle{{servicename}}Method

type {{dispatchername}} struct {
    target {{interfacename}}
}

func (d *{{dispatchername}}) SetTarget(t {{interfacename}}) {
    d.target = t
}

func (d *{{dispatchername}}) HandleBubble(remote nfrpc.RemoteNubInfo, methodid nfrpc.MethodID, data *bytes.Buffer) {
    if d.target == nil {
        return
    }

    handler, exists := {{methodmapname}}[methodid]
    if !exists {
        return
    }

    handler(d.target, remote, data)
}

{% for m in methods %}
func (d *{{dispatchername}}) handle{{m.name|capfirst}}(remote nfrpc.RemoteNubInfo,
		data *bytes.Buffer) {
{% if m.is_request %}

	var replyid nfrpc.ReplyID
    replyid, err := binary.ReadUvarint(data)
	if err {
        return
    }

	var arg {{m.arg|protoname}}
    err = proto.Unmarshal(data.Bytes(), &arg)
    if err {
		d.target.handle_{{name.lower()}}_bad_bubble(remote, {{m.type}}, data)
		return
	}

{% if m.async %}
	d.target.{{m.name}}(remote, replyid, &arg)
{% else %}
	var res {{m.res|protoname}}
	d.target.{{m.name}}(remote, &arg, &res)
	reply{{m.name | capfirst}}(remote, replyid, res)
{% endif %}{# m.async #}

{% else %}
	var arg {{m.arg|protoname}}
	err := proto.Unmarshal(data.Bytes(), &arg)
    if err != nil {
		d.target.handle_{{name.lower()}}_bad_bubble(remote, {{m.type}}, data)
		return
	}
	d.target.{{m.name}}(remote, &arg)
	return;
{% endif %}{# m.is_request #}
}
{% endfor %}{# m in methods #}

{% for m in methods if m.is_request %}
func (d *{{dispatchername}}) Reply{{m.name|capfirst}}(remote nfrpc.RemoteNubInfo,
		replyid nfrpc.ReplyID, res *{{m.res|protoname}}) {
	if (!nub()) {
		DLOG(ERR, "nub() == nullptr when sending reply");
		return;
	}

	Octets data;
	data.resize(res.ByteSize());
	res.SerializeWithCachedSizesToArray(reinterpret_cast<google::protobuf::uint8*>(data.begin()));

	// 在protobuf数据前，插入变长的replyid字段
	// TODO 优化效率
	Marshal::OctetsStream os;
	os << CompactUINT(replyid);
	os.insert(os.end(), data.begin(), data.size());

	// 负数代表这是回复包
	nub()->forwardBubble(remote, -{{m.type}}, os.begin(), os.size(), {{"true" if m.reliable else "false"}});
}
{% endfor %}{# m in methods if m.is_request #}

func init() {
{% for m in methods %}
	{{methodmapname}} [{{m.type}}] = handle{{m.name | capfirst}}
{% endfor %}{# m in methods #}
}

